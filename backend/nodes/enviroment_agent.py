# agents/environment_agent.py

import os
import json
from openai import OpenAI
from classes.state import ESGState
import requests
OPENROUTER_API_KEY = ""

headers = {
  'Authorization': f'Bearer {OPENROUTER_API_KEY}',
  'Content-Type': 'application/json',
}


class EnvironmentAgent:
    """
    Agent s·ª≠ d·ª•ng LLM (OpenAI GPT) ƒë·ªÉ ƒë√°nh gi√° ti√™u ch√≠ M√¥i tr∆∞·ªùng (E).
    System prompt ch·ª©a quy t·∫Øc ch·∫•m ƒëi·ªÉm E1, E2, E3.
    """

    def __init__(self):
        # Check for API key during initialization

        # System prompt ch·ª©a ƒë·∫ßy ƒë·ªß quy t·∫Øc ch·∫•m ƒëi·ªÉm
        self.system_prompt = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n ƒë√°nh gi√° ti√™u ch√≠ M√¥i tr∆∞·ªùng (Environmental) cho m·ªôt giao d·ªãch t√†i ch√≠nh.
D∆∞·ªõi ƒë√¢y l√† quy t·∫Øc ch·∫•m ƒëi·ªÉm minh h·ªça tham kh·∫£o:

E1. Ch·ª©ng ch·ªâ & Ti√™u chu·∫©n m√¥i tr∆∞·ªùng (t·ªëi ƒëa 1.5 ƒëi·ªÉm)
- N·∫øu t·ªï ch·ª©c nh·∫≠n c√≥ c√°c ch·ª©ng ch·ªâ sau, c·ªông ƒëi·ªÉm t∆∞∆°ng ·ª©ng:
  ‚Ä¢ 'LEED Platinum', 'Carbon Neutral', 'B-Corp Environmental' ‚Üí +1.5 ƒëi·ªÉm  
  ‚Ä¢ 'LEED Gold', 'LEED Silver', 'ISO 14001', 'BREEAM'             ‚Üí +1.0 ƒëi·ªÉm  
  ‚Ä¢ 'Energy Star', 'Green Building', 'ch·ª©ng ch·ªâ h·ªØu c∆° ƒë·ªãa ph∆∞∆°ng' ‚Üí +0.5 ƒëi·ªÉm  

E2. N·ªôi dung giao d·ªãch th√¢n thi·ªán m√¥i tr∆∞·ªùng (t·ªëi ƒëa 1.5 ƒëi·ªÉm)
- N·∫øu m√¥ t·∫£ giao d·ªãch ch·ª©a c√°c t·ª´ kh√≥a sau, c·ªông ƒëi·ªÉm t∆∞∆°ng ·ª©ng (l·∫•y m·ª©c cao nh·∫•t):
  ‚Ä¢ NƒÉng l∆∞·ª£ng s·∫°ch: 'nƒÉng l∆∞·ª£ng t√°i t·∫°o', 'pin m·∫∑t tr·ªùi', 'ƒëi·ªán gi√≥', 'biogas' ‚Üí +1.5  
  ‚Ä¢ Giao th√¥ng xanh: 'xe ƒëi·ªán', 'xe hybrid', 'v√© t√†u', 'xe bu√Ωt', 'xe ƒë·∫°p ƒëi·ªán' ‚Üí +1.0  
  ‚Ä¢ S·∫£n ph·∫©m xanh: 'organic', 'sinh h·ªçc', 't√°i ch·∫ø', 'th√¢n thi·ªán m√¥i tr∆∞·ªùng'     ‚Üí +0.75  
  ‚Ä¢ D·ªãch v·ª• xanh: 'l√†m s·∫°ch kh√¥ng h√≥a ch·∫•t', 'in 3D t√°i ch·∫ø', 's·ª≠a ch·ªØa t√°i s·ª≠ d·ª•ng' ‚Üí +0.5  

E3. Ph∆∞∆°ng th·ª©c giao d·ªãch s·ªë h√≥a (t·ªëi ƒëa 1.0 ƒëi·ªÉm)
- N·∫øu ph∆∞∆°ng th·ª©c thanh to√°n thu·ªôc nh√≥m sau, c·ªông ƒëi·ªÉm t∆∞∆°ng ·ª©ng:
  ‚Ä¢ Ho√†n to√†n s·ªë: 'QR', 'NFC', 'v√≠ ƒëi·ªán t·ª≠', 'blockchain'    ‚Üí +1.0  
  ‚Ä¢ Ch·ªß y·∫øu s·ªë: 'mobile banking', 'e-invoice', 'h√≥a ƒë∆°n ƒëi·ªán t·ª≠' ‚Üí +0.5
  ‚Ä¢ M·ªôt ph·∫ßn s·ªë: 'ATM', 'th·∫ª chip', 'SMS banking'          ‚Üí +0.25  

Y√™u c·∫ßu v·ªõi LLM:
1. D·ª±a v√†o d·ªØ li·ªáu `transaction_description`, `payment_method` v√† `receiver_info['environmental_certificates']`, 
   h√£y t√≠nh l·∫ßn l∆∞·ª£t E1, E2, E3 theo quy t·∫Øc tr√™n.
2. Tr·∫£ v·ªÅ k·∫øt qu·∫£ ·ªü ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:
   {
     "e1_score": float,
     "e2_score": float,
     "e3_score": float,
     "total_e_score": float,   # = e1_score + e2_score + e3_score, t·ªëi ƒëa 4.0
     "breakdown": {
        "certificates": <e1_score>,
        "keywords": <e2_score>,
        "digital_payment": <e3_score>
     },
     "explaination_message_e": "..." # short desbcription of the scores in genenral and in vietnamese language
   }
3. KH√îNG tr·∫£ l·ªùi b·∫•t k·ª≥ vƒÉn b·∫£n n√†o ngo√†i JSON thu·∫ßn. N·∫øu kh√¥ng t√¨m th·∫•y ch·ª©ng ch·ªâ ho·∫∑c t·ª´ kh√≥a, tr·∫£ 0.0 cho m·ª•c ƒë√≥.
"""

    def process(self, state: ESGState) -> ESGState:
        """
        G·ª≠i request t·ªõi OpenAI ChatCompletion, parse k·∫øt qu·∫£ JSON v√† l∆∞u ƒëi·ªÉm v√†o state.
        """
        try:
            # Ensure errors key exists
            if "errors" not in state:
                state["errors"] = []

            # Chu·∫©n b·ªã th√¥ng tin ƒë·∫ßu v√†o cho LLM
            transaction_desc = state["transaction_data"].get("transaction_description", "")
            payment_method = state["transaction_data"].get("payment_method", "")
            certificates = state["receiver_info"].get("environmental_certificates", [])

            # T·∫°o message cho LLM: system + user
            
            # Update OpenAI API call to use new format
            response = requests.post('https://openrouter.ai/api/v1/chat/completions', headers=headers, json={
                'model': 'meta-llama/llama-3.3-70b-instruct:nitro',
                'messages': [
                {"role": "system", "content": self.system_prompt},
                {
                    "role": "user",
                    "content": json.dumps({
                        "transaction_description": transaction_desc,
                        "payment_method": payment_method,
                        "environmental_certificates": certificates
                    }, ensure_ascii=False)
                }
                ],
                "response_format": {
                    "type": "json_object",
                }
            })
            
            # Add proper response validation
            if response.status_code != 200:
                raise Exception(f"OpenRouter API error: {response.status_code} - {response.text}")
            
            response_data = response.json()
            
            # Check if response has the expected structure
            if 'choices' not in response_data:
                raise Exception(f"Invalid API response structure: {response_data}")
            
            if not response_data['choices'] or 'message' not in response_data['choices'][0]:
                raise Exception(f"Invalid choices structure: {response_data}")
            
            analysis_result = response_data['choices'][0]['message']['content']

            # Chuy·ªÉn chu·ªói JSON th√†nh dict Python
            try:
                result = json.loads(analysis_result)
            except json.JSONDecodeError as e:
                state["errors"].append(f"Parsing JSON error: {str(e)} | Raw response: {analysis_result}")
                # N·∫øu parsing l·ªói, ƒë·∫∑t ƒëi·ªÉm 0
                result = {
                    "e1_score": 0.0,
                    "e2_score": 0.0,
                    "e3_score": 0.0,
                    "total_e_score": 0.0,
                    "breakdown": {
                        "certificates": 0.0,
                        "keywords": 0.0,
                        "digital_payment": 0.0
                    },
                    "explaination_message_e": "Parsing error"
                }

            # G√°n ƒëi·ªÉm v√†o state
            e1 = float(result.get("e1_score", 0.0))
            e2 = float(result.get("e2_score", 0.0))
            e3 = float(result.get("e3_score", 0.0))
            total_e = float(result.get("total_e_score", 0.0))

            state["environment_score"] = round(min(total_e, 4.0), 2)
            state["analysis_results"]["environment"] = {
                "certificates": round(e1, 2),
                "keywords": round(e2, 2),
                "digital_payment": round(e3, 2),
                "total": round(min(total_e, 4.0), 2),
                "explaination_message_e": result.get("explaination_message_e", "")
            }

            # print(f"üå± [LLM] Environment Score: {state['environment_score']:.2f}")
            # print(f"üå± Explanation for E: {state['analysis_results']['environment']['explaination_message_e']}")
            return state

        except Exception as e:
            # Ensure errors key exists before appending
            if "errors" not in state:
                state["errors"] = []
            state["errors"].append(f"EnvironmentAgent LLM error: {str(e)}")
            
            # Set default values
            state["environment_score"] = 0.0
            if "analysis_results" not in state:
                state["analysis_results"] = {}
            state["analysis_results"]["environment"] = {
                "certificates": 0.0,
                "keywords": 0.0,
                "digital_payment": 0.0,
                "total": 0.0,
                "explaination_message_e": "L·ªói x·ª≠ l√Ω"
            }
        
        return state
