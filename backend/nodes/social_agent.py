# agents/social_agent.py

import os
import json
from openai import OpenAI
import asyncio
from typing import Any, Dict

from classes.state import ESGState
import requests
OPENROUTER_API_KEY = ""

headers = {
  'Authorization': f'Bearer {OPENROUTER_API_KEY}',
  'Content-Type': 'application/json',
}


class SocialAgent:
    """
    Agent s·ª≠ d·ª•ng LLM (OpenAI GPT) ƒë·ªÉ ƒë√°nh gi√° ti√™u ch√≠ X√£ h·ªôi (Social).
    System prompt ch·ª©a quy t·∫Øc ch·∫•m ƒëi·ªÉm S1, S2.
    """

    def __init__(self, model: str = "gpt-4.1-nano"):


        # System prompt ch·ª©a ƒë·∫ßy ƒë·ªß quy t·∫Øc ch·∫•m ƒëi·ªÉm S1, S2
        self.system_prompt = """
    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n ƒë√°nh gi√° ti√™u ch√≠ X√£ h·ªôi (Social) cho m·ªôt giao d·ªãch t√†i ch√≠nh.
    D∆∞·ªõi ƒë√¢y l√† quy t·∫Øc ch·∫•m ƒëi·ªÉm minh h·ªça tham kh·∫£o:

    S1. Lo·∫°i h√¨nh t·ªï ch·ª©c/doanh nghi·ªáp (t·ªëi ƒëa 2.0 ƒëi·ªÉm)
    - N·∫øu t·ªï ch·ª©c nh·∫≠n thu·ªôc c√°c lo·∫°i sau, c·ªông ƒëi·ªÉm t∆∞∆°ng ·ª©ng:
      ‚Ä¢ Phi l·ª£i nhu·∫≠n: T·ªï ch·ª©c t·ª´ thi·ªán, qu·ªπ c·ª©u tr·ª£, h·ªôi ch·ªØ th·∫≠p ƒë·ªè ‚Üí +2.5 
      ‚Ä¢ Gi√°o d·ª•c - Y t·∫ø: Tr∆∞·ªùng h·ªçc, b·ªánh vi·ªán, ph√≤ng kh√°m, trung t√¢m nghi√™n c·ª©u ‚Üí +1.5  
      ‚Ä¢ Doanh nghi·ªáp x√£ h·ªôi: H·ª£p t√°c x√£, doanh nghi·ªáp c√≥ tr√°ch nhi·ªám x√£ h·ªôi cao ‚Üí +1.0  
      ‚Ä¢ SME ƒë·ªãa ph∆∞∆°ng: C·ª≠a h√†ng gia ƒë√¨nh, th∆∞∆°ng hi·ªáu ƒë·ªãa ph∆∞∆°ng nh·ªè ‚Üí +0.5  

    S2. M·ª•c ƒë√≠ch chuy·ªÉn kho·∫£n (t·ªëi ƒëa 1.5 ƒëi·ªÉm)
    - N·∫øu m√¥ t·∫£ giao d·ªãch ch·ª©a c√°c t·ª´ kh√≥a sau, c·ªông ƒëi·ªÉm t∆∞∆°ng ·ª©ng (l·∫•y m·ª©c cao nh·∫•t):
      ‚Ä¢ C·ª©u tr·ª£ kh·∫©n c·∫•p: 'thi√™n tai', 'l≈© l·ª•t', 'ƒë·ªông ƒë·∫•t', 'c·ª©u tr·ª£' ‚Üí +1.5  
      ‚Ä¢ T·ª´ thi·ªán: '·ªßng h·ªô', 't·ª´ thi·ªán', 'quy√™n g√≥p', 'gi√∫p ƒë·ª°' ‚Üí +1.0  
      ‚Ä¢ Gi√°o d·ª•c: 'h·ªçc ph√≠', 'h·ªçc b·ªïng', 's√°ch v·ªü', 'ƒë√†o t·∫°o' ‚Üí +0.75  
      ‚Ä¢ Y t·∫ø: 'ch·ªØa b·ªánh', 'ph·∫´u thu·∫≠t', 'thu·ªëc men', 'kh√°m ch·ªØa b·ªánh' ‚Üí +0.75  
      ‚Ä¢ H·ªó tr·ª£ c·ªông ƒë·ªìng: 'ng∆∞·ªùi gi√†', 'tr·∫ª em', 'ng∆∞·ªùi khuy·∫øt t·∫≠t', 'c·ªông ƒë·ªìng' ‚Üí +0.5  

    S3. T√°c ƒë·ªông x√£ h·ªôi r·ªông (t·ªëi ƒëa 0.5 ƒëi·ªÉm)
    - N·∫øu m√¥ t·∫£ giao d·ªãch th·ªÉ hi·ªán t√°c ƒë·ªông sau, c·ªông ƒëi·ªÉm t∆∞∆°ng ·ª©ng:
      ‚Ä¢ T·∫°o vi·ªác l√†m: Thanh to√°n l∆∞∆°ng cho lao ƒë·ªông ƒë·ªãa ph∆∞∆°ng, freelancer ‚Üí +0.25
      ‚Ä¢ H·ªó tr·ª£ MSME: Giao d·ªãch v·ªõi doanh nghi·ªáp si√™u nh·ªè, h·ªô kinh doanh ‚Üí +0.25

    Y√™u c·∫ßu v·ªõi LLM:
    1. D·ª±a v√†o:
       - `receiver_info["business_type"]`
       - `transaction_data["transaction_description"]`
       - (N·∫øu c·∫ßn) `receiver_info["company_size"]` ho·∫∑c th√¥ng tin KYC/AM‚ÄåL (n·∫øu mu·ªën m·ªü r·ªông)
        
       H√£y t√≠nh ƒëi·ªÉm S1 v√† S2 theo quy t·∫Øc ·ªü tr√™n.
    2. Tr·∫£ v·ªÅ k·∫øt qu·∫£ ·ªü ƒë·ªãnh d·∫°ng JSON (ch·ªâ c√≥ JSON thu·∫ßn, kh√¥ng c√≥ b·∫•t k·ª≥ ph·∫ßn text gi·∫£i th√≠ch n√†o) nh∆∞ sau:
       {
         "s1_score": float,
         "s2_score": float,
         "total_s_score": float,   # = s1_score + s2_score, t·ªëi ƒëa 4.0
         "breakdown": {
         "organization_type": <s1_score>,
         "purpose": <s2_score>,
         "explaination_message_s": "..."  short desbcription of the scores in genenral and in vietnamese language
    3. N·∫øu kh√¥ng t√¨m th·∫•y t·ªï ch·ª©c thu·ªôc S1 ho·∫∑c t·ª´ kh√≥a S2, tr·∫£ 0.0 cho m·ª•c ƒë√≥.
    4. Gi·ªõi h·∫°n `total_s_score` ·ªü m·ª©c t·ªëi ƒëa 4.0 
    L∆ØU √ù:
    - Ch·ªâ tr·∫£ JSON, KH√îNG tr·∫£ th√™m text thuy·∫øt minh.
    - K·∫øt qu·∫£ JSON ph·∫£i parseable ho√†n to√†n.
    """

    def process(self, state: ESGState) -> ESGState:
        """
        G·ª≠i request t·ªõi OpenAI ChatCompletion, parse k·∫øt qu·∫£ JSON v√† l∆∞u ƒëi·ªÉm v√†o state.
        """
        try:
            # L·∫•y th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ g·ª≠i cho LLM
            business_type = state["receiver_info"].get("business_type", "")
            description = state["transaction_data"].get("transaction_description", "")

            # T·∫°o message cho LLM: system + user
            input_payload = {
                "business_type": business_type,
                "transaction_description": description
            }

            response = requests.post('https://openrouter.ai/api/v1/chat/completions', headers=headers, json={
                'model': 'meta-llama/llama-3.3-70b-instruct:nitro',
                'messages': [
                {"role": "system", "content": self.system_prompt},
                {
                    "role": "user",
                    "content": json.dumps(input_payload, ensure_ascii=False)
                }
                ],
                "response_format": {
                    "type": "json_object",
                }
            })
           
            content = response.json()['choices'][0]['message']['content']

            # Chuy·ªÉn chu·ªói JSON th√†nh dict Python
            try:
                result = json.loads(content)
            except json.JSONDecodeError as e:
                if "errors" not in state:
                    state["errors"] = []
                state["errors"].append(f"Parsing JSON error (SocialAgent): {str(e)} | Raw response: {content}")
                # N·∫øu parsing l·ªói, ƒë·∫∑t ƒëi·ªÉm 0
                result = {
                    "s1_score": 0.0,
                    "s2_score": 0.0,
                    "total_s_score": 0.0,
                    "breakdown": {
                        "organization_type": 0.0,
                        "purpose": 0.0,
                        "explaination_message_s": "Kh√¥ng th·ªÉ parse k·∫øt qu·∫£ t·ª´ LLM."
                    }
                }

            # G√°n ƒëi·ªÉm v√†o state
            s1 = float(result.get("s1_score", 0.0))
            s2 = float(result.get("s2_score", 0.0))
            total_s = float(result.get("total_s_score", 0.0))

            # Gi·ªõi h·∫°n t·ªïng ƒëi·ªÉm (n·∫øu b·∫°n mu·ªën gi·ªõi h·∫°n ·ªü 4.0 ho·∫∑c 3.5)
            capped_total = round(min(total_s, 4.0), 2)

            # Extract explanation from breakdown or direct field
            explanation = result.get("breakdown", {}).get("explaination_message_s", 
                                   result.get("explaination_message_s", "Kh√¥ng c√≥ gi·∫£i th√≠ch"))

            state["social_score"] = capped_total
            state["analysis_results"]["social"] = {
                "organization_type": round(s1, 2),
                "purpose": round(s2, 2),
                "total": capped_total,
                "explaination_message_s": explanation
            }

            # print(f"üë• [LLM] Social Score: {state['social_score']:.2f}")
            # print(f"üë• [LLM] Explanation s: {explanation}")
            return state

        except Exception as e:
            if "errors" not in state:
                state["errors"] = []
            state["errors"].append(f"SocialAgent LLM error: {str(e)}")
            
            # Set default values
            state["social_score"] = 0.0
            if "analysis_results" not in state:
                state["analysis_results"] = {}
            state["analysis_results"]["social"] = {
                "organization_type": 0.0,
                "purpose": 0.0,
                "total": 0.0,
                "explaination_message_s": "L·ªói x·ª≠ l√Ω"
            }
            return state
